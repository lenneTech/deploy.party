import {FindAndCountUsersResult, SortInput, FilterInput, User, Meta, FileInfo, FindAndCountContainersResult, Container, ContainerStats, ContainerHealthStatus, FindAndCountProjectsResult, Project, FindAndCountTeamsResult, Team, SystemStats, FindAndCountBuildsResult, Build, FindAndCountWebPushsResult, WebPush, FindAndCountRegistrysResult, Registry, Source, FindAndCountBackupsResult, Backup, S3BackupListOutput, ApiKey, CoreAuthModel, Auth, AuthSignInInput, AuthSignUpInput, UserCreateInput, UserInput, ContainerCreateInput, ContainerInput, ProjectCreateInput, ProjectInput, TeamCreateInput, TeamInput, BuildCreateInput, BuildInput, WebPushCreateInput, WebPushInput, RegistryCreateInput, RegistryInput, SourceCreateInput, SourceInput, BackupCreateInput, BackupInput, ApiKeyCreateInput, EventsOutput} from "./default"
import type { InputFields } from '#base-types/fields';

import { gqlQuery, gqlMutation, gqlSubscription } from '#imports';

import { UseMutationReturn, UseSubscriptionReturn } from '@vue/apollo-composable';

import type { AsyncData } from 'nuxt/app';
export const useFindAndCountUsersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountUsersResult>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findAndCountUsers: FindAndCountUsersResult}, any>> => gqlQuery<{findAndCountUsers: FindAndCountUsersResult}>('findAndCountUsers', {variables, fields, lazy, log})
export const useFindUsersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<User>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findUsers: User[]}, any>> => gqlQuery<{findUsers: User[]}>('findUsers', {variables, fields, lazy, log})
export const useGetUserQuery = (variables: { id: string }, fields?: InputFields<User>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getUser: User}, any>> => gqlQuery<{getUser: User}>('getUser', {variables, fields, lazy, log})
export const useGetVerifiedStateQuery = (variables: { token: string }, fields?: InputFields<boolean>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getVerifiedState: boolean}, any>> => gqlQuery<{getVerifiedState: boolean}>('getVerifiedState', {variables, fields, lazy, log})
export const useRequestPasswordResetMailQuery = (variables: { email: string }, fields?: InputFields<boolean>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{requestPasswordResetMail: boolean}, any>> => gqlQuery<{requestPasswordResetMail: boolean}>('requestPasswordResetMail', {variables, fields, lazy, log})
export const useGetMetaQuery = ( fields?: InputFields<Meta>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getMeta: Meta}, any>> => gqlQuery<{getMeta: Meta}>('getMeta', { fields, lazy, log})
export const useGetFileInfoQuery = (variables: { filename: string }, fields?: InputFields<FileInfo>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getFileInfo: FileInfo}, any>> => gqlQuery<{getFileInfo: FileInfo}>('getFileInfo', {variables, fields, lazy, log})
export const useFindAndCountContainersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountContainersResult>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findAndCountContainers: FindAndCountContainersResult}, any>> => gqlQuery<{findAndCountContainers: FindAndCountContainersResult}>('findAndCountContainers', {variables, fields, lazy, log})
export const useFindContainersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Container>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findContainers: Container[]}, any>> => gqlQuery<{findContainers: Container[]}>('findContainers', {variables, fields, lazy, log})
export const useGetContainerQuery = (variables: { id: string }, fields?: InputFields<Container>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getContainer: Container}, any>> => gqlQuery<{getContainer: Container}>('getContainer', {variables, fields, lazy, log})
export const useGetContainerLogsQuery = (variables: { id: string, since?: string }, fields?: InputFields<String>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getContainerLogs: String[]}, any>> => gqlQuery<{getContainerLogs: String[]}>('getContainerLogs', {variables, fields, lazy, log})
export const useGetContainerStatsQuery = (variables: { id: string }, fields?: InputFields<ContainerStats>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getContainerStats: ContainerStats}, any>> => gqlQuery<{getContainerStats: ContainerStats}>('getContainerStats', {variables, fields, lazy, log})
export const useGetContainerHealthStatusQuery = (variables: { id: string }, fields?: InputFields<ContainerHealthStatus>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getContainerHealthStatus: ContainerHealthStatus}, any>> => gqlQuery<{getContainerHealthStatus: ContainerHealthStatus}>('getContainerHealthStatus', {variables, fields, lazy, log})
export const useFindAndCountProjectsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountProjectsResult>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findAndCountProjects: FindAndCountProjectsResult}, any>> => gqlQuery<{findAndCountProjects: FindAndCountProjectsResult}>('findAndCountProjects', {variables, fields, lazy, log})
export const useFindProjectsQuery = ( fields?: InputFields<Project>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findProjects: Project[]}, any>> => gqlQuery<{findProjects: Project[]}>('findProjects', { fields, lazy, log})
export const useGetProjectQuery = (variables: { id: string }, fields?: InputFields<Project>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getProject: Project}, any>> => gqlQuery<{getProject: Project}>('getProject', {variables, fields, lazy, log})
export const useFindAndCountTeamsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountTeamsResult>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findAndCountTeams: FindAndCountTeamsResult}, any>> => gqlQuery<{findAndCountTeams: FindAndCountTeamsResult}>('findAndCountTeams', {variables, fields, lazy, log})
export const useFindTeamsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Team>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findTeams: Team[]}, any>> => gqlQuery<{findTeams: Team[]}>('findTeams', {variables, fields, lazy, log})
export const useGetTeamQuery = (variables: { id: string }, fields?: InputFields<Team>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getTeam: Team}, any>> => gqlQuery<{getTeam: Team}>('getTeam', {variables, fields, lazy, log})
export const useGetContainerCountQuery = (variables: { id: string }, fields?: InputFields<Float>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getContainerCount: Float}, any>> => gqlQuery<{getContainerCount: Float}>('getContainerCount', {variables, fields, lazy, log})
export const useGetBuildCountQuery = (variables: { id: string }, fields?: InputFields<Float>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getBuildCount: Float}, any>> => gqlQuery<{getBuildCount: Float}>('getBuildCount', {variables, fields, lazy, log})
export const useGetSystemStatsQuery = (variables: { id: string }, fields?: InputFields<SystemStats>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getSystemStats: SystemStats}, any>> => gqlQuery<{getSystemStats: SystemStats}>('getSystemStats', {variables, fields, lazy, log})
export const useGetTeamByCurrentUserQuery = ( fields?: InputFields<Team>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getTeamByCurrentUser: Team}, any>> => gqlQuery<{getTeamByCurrentUser: Team}>('getTeamByCurrentUser', { fields, lazy, log})
export const useGetMembersOfTeamQuery = ( fields?: InputFields<User>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getMembersOfTeam: User[]}, any>> => gqlQuery<{getMembersOfTeam: User[]}>('getMembersOfTeam', { fields, lazy, log})
export const useFindAndCountBuildsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountBuildsResult>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findAndCountBuilds: FindAndCountBuildsResult}, any>> => gqlQuery<{findAndCountBuilds: FindAndCountBuildsResult}>('findAndCountBuilds', {variables, fields, lazy, log})
export const useFindBuildsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Build>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findBuilds: Build[]}, any>> => gqlQuery<{findBuilds: Build[]}>('findBuilds', {variables, fields, lazy, log})
export const useFindBuildsForContainerQuery = (variables: { containerId: string }, fields?: InputFields<Build>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findBuildsForContainer: Build[]}, any>> => gqlQuery<{findBuildsForContainer: Build[]}>('findBuildsForContainer', {variables, fields, lazy, log})
export const useGetBuildQuery = (variables: { id: string }, fields?: InputFields<Build>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getBuild: Build}, any>> => gqlQuery<{getBuild: Build}>('getBuild', {variables, fields, lazy, log})
export const useFindAndCountWebPushsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountWebPushsResult>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findAndCountWebPushs: FindAndCountWebPushsResult}, any>> => gqlQuery<{findAndCountWebPushs: FindAndCountWebPushsResult}>('findAndCountWebPushs', {variables, fields, lazy, log})
export const useFindWebPushsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<WebPush>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findWebPushs: WebPush[]}, any>> => gqlQuery<{findWebPushs: WebPush[]}>('findWebPushs', {variables, fields, lazy, log})
export const useGetWebPushQuery = (variables: { id: string }, fields?: InputFields<WebPush>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getWebPush: WebPush}, any>> => gqlQuery<{getWebPush: WebPush}>('getWebPush', {variables, fields, lazy, log})
export const useFindAndCountRegistrysQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountRegistrysResult>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findAndCountRegistrys: FindAndCountRegistrysResult}, any>> => gqlQuery<{findAndCountRegistrys: FindAndCountRegistrysResult}>('findAndCountRegistrys', {variables, fields, lazy, log})
export const useFindRegistrysQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Registry>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findRegistrys: Registry[]}, any>> => gqlQuery<{findRegistrys: Registry[]}>('findRegistrys', {variables, fields, lazy, log})
export const useGetRegistryQuery = (variables: { id: string }, fields?: InputFields<Registry>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getRegistry: Registry}, any>> => gqlQuery<{getRegistry: Registry}>('getRegistry', {variables, fields, lazy, log})
export const useFindSourcesQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Source>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findSources: Source[]}, any>> => gqlQuery<{findSources: Source[]}>('findSources', {variables, fields, lazy, log})
export const useGetSourceQuery = (variables: { id: string }, fields?: InputFields<Source>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getSource: Source}, any>> => gqlQuery<{getSource: Source}>('getSource', {variables, fields, lazy, log})
export const useFindAndCountBackupsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountBackupsResult>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findAndCountBackups: FindAndCountBackupsResult}, any>> => gqlQuery<{findAndCountBackups: FindAndCountBackupsResult}>('findAndCountBackups', {variables, fields, lazy, log})
export const useFindBackupsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Backup>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findBackups: Backup[]}, any>> => gqlQuery<{findBackups: Backup[]}>('findBackups', {variables, fields, lazy, log})
export const useGetBackupQuery = (variables: { id: string }, fields?: InputFields<Backup>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getBackup: Backup}, any>> => gqlQuery<{getBackup: Backup}>('getBackup', {variables, fields, lazy, log})
export const useGetBackupByDatabaseQuery = (variables: { containerId: string }, fields?: InputFields<Backup>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getBackupByDatabase: Backup}, any>> => gqlQuery<{getBackupByDatabase: Backup}>('getBackupByDatabase', {variables, fields, lazy, log})
export const useListBackupsQuery = (variables: { containerId: string }, fields?: InputFields<S3BackupListOutput>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{listBackups: S3BackupListOutput[]}, any>> => gqlQuery<{listBackups: S3BackupListOutput[]}>('listBackups', {variables, fields, lazy, log})
export const useFindApiKeysQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<ApiKey>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findApiKeys: ApiKey[]}, any>> => gqlQuery<{findApiKeys: ApiKey[]}>('findApiKeys', {variables, fields, lazy, log})
export const useLogoutMutation = (variables: { allDevices?: string }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{logout: boolean}, any>> => gqlMutation<{logout: boolean}>('logout', {variables, fields, log})
export const useRefreshTokenMutation = ( fields?: InputFields<CoreAuthModel>[] | null, log?: boolean): Promise<UseMutationReturn<{refreshToken: CoreAuthModel}, any>> => gqlMutation<{refreshToken: CoreAuthModel}>('refreshToken', { fields, log})
export const useSignInMutation = (variables: { input: AuthSignInInput }, fields?: InputFields<Auth>[] | null, log?: boolean): Promise<UseMutationReturn<{signIn: Auth}, any>> => gqlMutation<{signIn: Auth}>('signIn', {variables, fields, log})
export const useSignUpMutation = (variables: { input: AuthSignUpInput }, fields?: InputFields<Auth>[] | null, log?: boolean): Promise<UseMutationReturn<{signUp: Auth}, any>> => gqlMutation<{signUp: Auth}>('signUp', {variables, fields, log})
export const useCreateUserMutation = (variables: { input: UserCreateInput }, fields?: InputFields<User>[] | null, log?: boolean): Promise<UseMutationReturn<{createUser: User}, any>> => gqlMutation<{createUser: User}>('createUser', {variables, fields, log})
export const useDeleteUserMutation = (variables: { id: string }, fields?: InputFields<User>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteUser: User}, any>> => gqlMutation<{deleteUser: User}>('deleteUser', {variables, fields, log})
export const useResetPasswordMutation = (variables: { token: string, password: string }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{resetPassword: boolean}, any>> => gqlMutation<{resetPassword: boolean}>('resetPassword', {variables, fields, log})
export const useUpdateUserMutation = (variables: { input: UserInput, id: string }, fields?: InputFields<User>[] | null, log?: boolean): Promise<UseMutationReturn<{updateUser: User}, any>> => gqlMutation<{updateUser: User}>('updateUser', {variables, fields, log})
export const useVerifyUserMutation = (variables: { token: string }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{verifyUser: boolean}, any>> => gqlMutation<{verifyUser: boolean}>('verifyUser', {variables, fields, log})
export const useDeleteFileMutation = (variables: { filename: string }, fields?: InputFields<FileInfo>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteFile: FileInfo}, any>> => gqlMutation<{deleteFile: FileInfo}>('deleteFile', {variables, fields, log})
export const useUploadFileMutation = (variables: { file: Upload }, fields?: InputFields<FileInfo>[] | null, log?: boolean): Promise<UseMutationReturn<{uploadFile: FileInfo}, any>> => gqlMutation<{uploadFile: FileInfo}>('uploadFile', {variables, fields, log})
export const useUploadFilesMutation = (variables: { files: Upload[] }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{uploadFiles: boolean}, any>> => gqlMutation<{uploadFiles: boolean}>('uploadFiles', {variables, fields, log})
export const useCreateContainerMutation = (variables: { projectId: string, input: ContainerCreateInput }, fields?: InputFields<Container>[] | null, log?: boolean): Promise<UseMutationReturn<{createContainer: Container}, any>> => gqlMutation<{createContainer: Container}>('createContainer', {variables, fields, log})
export const useDuplicateContainerMutation = (variables: { containerId: string }, fields?: InputFields<Container>[] | null, log?: boolean): Promise<UseMutationReturn<{duplicateContainer: Container}, any>> => gqlMutation<{duplicateContainer: Container}>('duplicateContainer', {variables, fields, log})
export const useDeleteContainerMutation = (variables: { id: string }, fields?: InputFields<Container>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteContainer: Container}, any>> => gqlMutation<{deleteContainer: Container}>('deleteContainer', {variables, fields, log})
export const useUpdateContainerMutation = (variables: { id: string, input: ContainerInput }, fields?: InputFields<Container>[] | null, log?: boolean): Promise<UseMutationReturn<{updateContainer: Container}, any>> => gqlMutation<{updateContainer: Container}>('updateContainer', {variables, fields, log})
export const useDeployContainerMutation = (variables: { id: string }, fields?: InputFields<Container>[] | null, log?: boolean): Promise<UseMutationReturn<{deployContainer: Container}, any>> => gqlMutation<{deployContainer: Container}>('deployContainer', {variables, fields, log})
export const useStopContainerMutation = (variables: { id: string }, fields?: InputFields<Container>[] | null, log?: boolean): Promise<UseMutationReturn<{stopContainer: Container}, any>> => gqlMutation<{stopContainer: Container}>('stopContainer', {variables, fields, log})
export const useStopAllContainersMutation = ( fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{stopAllContainers: boolean}, any>> => gqlMutation<{stopAllContainers: boolean}>('stopAllContainers', { fields, log})
export const useStartAllStoppedContainersMutation = ( fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{startAllStoppedContainers: boolean}, any>> => gqlMutation<{startAllStoppedContainers: boolean}>('startAllStoppedContainers', { fields, log})
export const useDeleteVolumeMutation = (variables: { id: string }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteVolume: boolean}, any>> => gqlMutation<{deleteVolume: boolean}>('deleteVolume', {variables, fields, log})
export const useCreateProjectMutation = (variables: { teamId: string, input: ProjectCreateInput }, fields?: InputFields<Project>[] | null, log?: boolean): Promise<UseMutationReturn<{createProject: Project}, any>> => gqlMutation<{createProject: Project}>('createProject', {variables, fields, log})
export const useDeleteProjectMutation = (variables: { id: string }, fields?: InputFields<Project>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteProject: Project}, any>> => gqlMutation<{deleteProject: Project}>('deleteProject', {variables, fields, log})
export const useUpdateProjectMutation = (variables: { id: string, input: ProjectInput }, fields?: InputFields<Project>[] | null, log?: boolean): Promise<UseMutationReturn<{updateProject: Project}, any>> => gqlMutation<{updateProject: Project}>('updateProject', {variables, fields, log})
export const useCreateTeamMutation = (variables: { input: TeamCreateInput }, fields?: InputFields<Team>[] | null, log?: boolean): Promise<UseMutationReturn<{createTeam: Team}, any>> => gqlMutation<{createTeam: Team}>('createTeam', {variables, fields, log})
export const useDeleteTeamMutation = (variables: { id: string }, fields?: InputFields<Team>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteTeam: Team}, any>> => gqlMutation<{deleteTeam: Team}>('deleteTeam', {variables, fields, log})
export const useUpdateTeamMutation = (variables: { id: string, input: TeamInput }, fields?: InputFields<Team>[] | null, log?: boolean): Promise<UseMutationReturn<{updateTeam: Team}, any>> => gqlMutation<{updateTeam: Team}>('updateTeam', {variables, fields, log})
export const useInviteTeamMemberMutation = (variables: { teamId: string, input: UserCreateInput }, fields?: InputFields<User>[] | null, log?: boolean): Promise<UseMutationReturn<{inviteTeamMember: User}, any>> => gqlMutation<{inviteTeamMember: User}>('inviteTeamMember', {variables, fields, log})
export const useCreateBuildMutation = (variables: { input: BuildCreateInput }, fields?: InputFields<Build>[] | null, log?: boolean): Promise<UseMutationReturn<{createBuild: Build}, any>> => gqlMutation<{createBuild: Build}>('createBuild', {variables, fields, log})
export const useDeleteBuildMutation = (variables: { id: string }, fields?: InputFields<Build>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteBuild: Build}, any>> => gqlMutation<{deleteBuild: Build}>('deleteBuild', {variables, fields, log})
export const useUpdateBuildMutation = (variables: { id: string, input: BuildInput }, fields?: InputFields<Build>[] | null, log?: boolean): Promise<UseMutationReturn<{updateBuild: Build}, any>> => gqlMutation<{updateBuild: Build}>('updateBuild', {variables, fields, log})
export const useRestartBuildMutation = (variables: { id: string }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{restartBuild: boolean}, any>> => gqlMutation<{restartBuild: boolean}>('restartBuild', {variables, fields, log})
export const useStopBuildMutation = (variables: { id: string }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{stopBuild: boolean}, any>> => gqlMutation<{stopBuild: boolean}>('stopBuild', {variables, fields, log})
export const useCreateWebPushMutation = (variables: { input: WebPushCreateInput }, fields?: InputFields<WebPush>[] | null, log?: boolean): Promise<UseMutationReturn<{createWebPush: WebPush}, any>> => gqlMutation<{createWebPush: WebPush}>('createWebPush', {variables, fields, log})
export const useDeleteWebPushMutation = (variables: { id: string }, fields?: InputFields<WebPush>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteWebPush: WebPush}, any>> => gqlMutation<{deleteWebPush: WebPush}>('deleteWebPush', {variables, fields, log})
export const useUpdateWebPushMutation = (variables: { id: string, input: WebPushInput }, fields?: InputFields<WebPush>[] | null, log?: boolean): Promise<UseMutationReturn<{updateWebPush: WebPush}, any>> => gqlMutation<{updateWebPush: WebPush}>('updateWebPush', {variables, fields, log})
export const useCreateRegistryMutation = (variables: { teamId: string, input: RegistryCreateInput }, fields?: InputFields<Registry>[] | null, log?: boolean): Promise<UseMutationReturn<{createRegistry: Registry}, any>> => gqlMutation<{createRegistry: Registry}>('createRegistry', {variables, fields, log})
export const useDeleteRegistryMutation = (variables: { id: string }, fields?: InputFields<Registry>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteRegistry: Registry}, any>> => gqlMutation<{deleteRegistry: Registry}>('deleteRegistry', {variables, fields, log})
export const useUpdateRegistryMutation = (variables: { id: string, input: RegistryInput }, fields?: InputFields<Registry>[] | null, log?: boolean): Promise<UseMutationReturn<{updateRegistry: Registry}, any>> => gqlMutation<{updateRegistry: Registry}>('updateRegistry', {variables, fields, log})
export const useCreateSourceMutation = (variables: { input: SourceCreateInput }, fields?: InputFields<Source>[] | null, log?: boolean): Promise<UseMutationReturn<{createSource: Source}, any>> => gqlMutation<{createSource: Source}>('createSource', {variables, fields, log})
export const useDeleteSourceMutation = (variables: { id: string }, fields?: InputFields<Source>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteSource: Source}, any>> => gqlMutation<{deleteSource: Source}>('deleteSource', {variables, fields, log})
export const useUpdateSourceMutation = (variables: { id: string, input: SourceInput }, fields?: InputFields<Source>[] | null, log?: boolean): Promise<UseMutationReturn<{updateSource: Source}, any>> => gqlMutation<{updateSource: Source}>('updateSource', {variables, fields, log})
export const useCreateBackupMutation = (variables: { input: BackupCreateInput }, fields?: InputFields<Backup>[] | null, log?: boolean): Promise<UseMutationReturn<{createBackup: Backup}, any>> => gqlMutation<{createBackup: Backup}>('createBackup', {variables, fields, log})
export const useDeleteBackupMutation = (variables: { id: string }, fields?: InputFields<Backup>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteBackup: Backup}, any>> => gqlMutation<{deleteBackup: Backup}>('deleteBackup', {variables, fields, log})
export const useRestoreBackupMutation = (variables: { containerId: string, s3Key: string }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{restoreBackup: boolean}, any>> => gqlMutation<{restoreBackup: boolean}>('restoreBackup', {variables, fields, log})
export const useRestoreBackupVolumeMutation = (variables: { containerId: string, s3Key: string }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{restoreBackupVolume: boolean}, any>> => gqlMutation<{restoreBackupVolume: boolean}>('restoreBackupVolume', {variables, fields, log})
export const useUpdateBackupMutation = (variables: { id: string, input: BackupInput }, fields?: InputFields<Backup>[] | null, log?: boolean): Promise<UseMutationReturn<{updateBackup: Backup}, any>> => gqlMutation<{updateBackup: Backup}>('updateBackup', {variables, fields, log})
export const useCreateApiKeyMutation = (variables: { input: ApiKeyCreateInput }, fields?: InputFields<ApiKey>[] | null, log?: boolean): Promise<UseMutationReturn<{createApiKey: ApiKey}, any>> => gqlMutation<{createApiKey: ApiKey}>('createApiKey', {variables, fields, log})
export const useDeleteApiKeyMutation = (variables: { id: string }, fields?: InputFields<ApiKey>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteApiKey: ApiKey}, any>> => gqlMutation<{deleteApiKey: ApiKey}>('deleteApiKey', {variables, fields, log})
export const useUserCreatedSubscription = ( fields?: InputFields<User>[] | null, log?: boolean): Promise<UseSubscriptionReturn<{userCreated: User}, any>> => gqlSubscription<{userCreated: User}>('userCreated', { fields, log})
export const useEventsSubscription = ( fields?: InputFields<EventsOutput>[] | null, log?: boolean): Promise<UseSubscriptionReturn<{events: EventsOutput}, any>> => gqlSubscription<{events: EventsOutput}>('events', { fields, log})
export const useProjectCreatedSubscription = ( fields?: InputFields<Project>[] | null, log?: boolean): Promise<UseSubscriptionReturn<{projectCreated: Project}, any>> => gqlSubscription<{projectCreated: Project}>('projectCreated', { fields, log})
export const useBuildCreatedSubscription = ( fields?: InputFields<Build>[] | null, log?: boolean): Promise<UseSubscriptionReturn<{buildCreated: Build}, any>> => gqlSubscription<{buildCreated: Build}>('buildCreated', { fields, log})
export const useWebPushCreatedSubscription = ( fields?: InputFields<WebPush>[] | null, log?: boolean): Promise<UseSubscriptionReturn<{webPushCreated: WebPush}, any>> => gqlSubscription<{webPushCreated: WebPush}>('webPushCreated', { fields, log})