import type {FindAndCountUsersResult, SortInput, FilterInput, User, Meta, FileInfo, FindAndCountContainersResult, Container, ContainerStats, ContainerHealthStatus, FindAndCountProjectsResult, Project, FindAndCountTeamsResult, Team, SystemStats, FindAndCountBuildsResult, Build, FindAndCountWebPushsResult, WebPush, FindAndCountRegistrysResult, Registry, Source, FindAndCountBackupsResult, Backup, S3BackupListOutput, ApiKey, CoreAuthModel, Auth, AuthSignInInput, AuthSignUpInput, UserCreateInput, UserInput, ContainerCreateInput, ContainerInput, ProjectCreateInput, ProjectInput, TeamCreateInput, TeamInput, BuildCreateInput, BuildInput, WebPushCreateInput, WebPushInput, RegistryCreateInput, RegistryInput, SourceCreateInput, SourceInput, BackupCreateInput, BackupInput, ApiKeyCreateInput, EventsOutput} from "./default"
import type { InputFields } from '#base-types/fields';
import { gqlQuery, gqlAsyncQuery, gqlMutation, gqlSubscription } from '#imports';
import type { AsyncData, AsyncDataOptions } from 'nuxt/app';

import type { ReturnTypeOfSubscription } from '#base-interfaces/return-type-of-subscription.interface';

import type { GraphqlError } from '#base-interfaces/graphql-error.interface';

export const useFindAndCountUsersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountUsersResult>[] | null, log?: boolean): Promise<{data: FindAndCountUsersResult; error: GraphqlError | null}> => gqlQuery<FindAndCountUsersResult>('findAndCountUsers', {variables, fields, log})
export const useAsyncFindAndCountUsersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountUsersResult>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<FindAndCountUsersResult, Error>> => gqlAsyncQuery<FindAndCountUsersResult>('findAndCountUsers', {variables, fields, asyncDataOptions, log})
export const useFindUsersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<User>[] | null, log?: boolean): Promise<{data: User[]; error: GraphqlError | null}> => gqlQuery<User[]>('findUsers', {variables, fields, log})
export const useAsyncFindUsersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<User>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<User[], Error>> => gqlAsyncQuery<User[]>('findUsers', {variables, fields, asyncDataOptions, log})
export const useGetUserQuery = (variables: { id: string }, fields?: InputFields<User>[] | null, log?: boolean): Promise<{data: User; error: GraphqlError | null}> => gqlQuery<User>('getUser', {variables, fields, log})
export const useAsyncGetUserQuery = (variables: { id: string }, fields?: InputFields<User>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<User, Error>> => gqlAsyncQuery<User>('getUser', {variables, fields, asyncDataOptions, log})
export const useGetVerifiedStateQuery = (variables: { token: string },  log?: boolean): Promise<{data: boolean; error: GraphqlError | null}> => gqlQuery<boolean>('getVerifiedState', {variables, fields: null, log})
export const useAsyncGetVerifiedStateQuery = (variables: { token: string },  log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<boolean, Error>> => gqlAsyncQuery<boolean>('getVerifiedState', {variables, fields: null, asyncDataOptions, log})
export const useRequestPasswordResetMailQuery = (variables: { email: string },  log?: boolean): Promise<{data: boolean; error: GraphqlError | null}> => gqlQuery<boolean>('requestPasswordResetMail', {variables, fields: null, log})
export const useAsyncRequestPasswordResetMailQuery = (variables: { email: string },  log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<boolean, Error>> => gqlAsyncQuery<boolean>('requestPasswordResetMail', {variables, fields: null, asyncDataOptions, log})
export const useGetMetaQuery = ( fields?: InputFields<Meta>[] | null, log?: boolean): Promise<{data: Meta; error: GraphqlError | null}> => gqlQuery<Meta>('getMeta', { fields, log})
export const useAsyncGetMetaQuery = ( fields?: InputFields<Meta>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Meta, Error>> => gqlAsyncQuery<Meta>('getMeta', { fields, asyncDataOptions, log})
export const useGetFileInfoQuery = (variables: { filename: string }, fields?: InputFields<FileInfo>[] | null, log?: boolean): Promise<{data: FileInfo; error: GraphqlError | null}> => gqlQuery<FileInfo>('getFileInfo', {variables, fields, log})
export const useAsyncGetFileInfoQuery = (variables: { filename: string }, fields?: InputFields<FileInfo>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<FileInfo, Error>> => gqlAsyncQuery<FileInfo>('getFileInfo', {variables, fields, asyncDataOptions, log})
export const useFindAndCountContainersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountContainersResult>[] | null, log?: boolean): Promise<{data: FindAndCountContainersResult; error: GraphqlError | null}> => gqlQuery<FindAndCountContainersResult>('findAndCountContainers', {variables, fields, log})
export const useAsyncFindAndCountContainersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountContainersResult>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<FindAndCountContainersResult, Error>> => gqlAsyncQuery<FindAndCountContainersResult>('findAndCountContainers', {variables, fields, asyncDataOptions, log})
export const useFindContainersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Container>[] | null, log?: boolean): Promise<{data: Container[]; error: GraphqlError | null}> => gqlQuery<Container[]>('findContainers', {variables, fields, log})
export const useAsyncFindContainersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Container>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Container[], Error>> => gqlAsyncQuery<Container[]>('findContainers', {variables, fields, asyncDataOptions, log})
export const useGetContainerQuery = (variables: { id: string }, fields?: InputFields<Container>[] | null, log?: boolean): Promise<{data: Container; error: GraphqlError | null}> => gqlQuery<Container>('getContainer', {variables, fields, log})
export const useAsyncGetContainerQuery = (variables: { id: string }, fields?: InputFields<Container>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Container, Error>> => gqlAsyncQuery<Container>('getContainer', {variables, fields, asyncDataOptions, log})
export const useGetContainerLogsQuery = (variables: { id: string, since?: string }, fields?: InputFields<string>[] | null, log?: boolean): Promise<{data: string[]; error: GraphqlError | null}> => gqlQuery<string[]>('getContainerLogs', {variables, fields, log})
export const useAsyncGetContainerLogsQuery = (variables: { id: string, since?: string }, fields?: InputFields<string>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<string[], Error>> => gqlAsyncQuery<string[]>('getContainerLogs', {variables, fields, asyncDataOptions, log})
export const useGetContainerStatsQuery = (variables: { id: string }, fields?: InputFields<ContainerStats>[] | null, log?: boolean): Promise<{data: ContainerStats; error: GraphqlError | null}> => gqlQuery<ContainerStats>('getContainerStats', {variables, fields, log})
export const useAsyncGetContainerStatsQuery = (variables: { id: string }, fields?: InputFields<ContainerStats>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<ContainerStats, Error>> => gqlAsyncQuery<ContainerStats>('getContainerStats', {variables, fields, asyncDataOptions, log})
export const useGetContainerHealthStatusQuery = (variables: { id: string }, fields?: InputFields<ContainerHealthStatus>[] | null, log?: boolean): Promise<{data: ContainerHealthStatus; error: GraphqlError | null}> => gqlQuery<ContainerHealthStatus>('getContainerHealthStatus', {variables, fields, log})
export const useAsyncGetContainerHealthStatusQuery = (variables: { id: string }, fields?: InputFields<ContainerHealthStatus>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<ContainerHealthStatus, Error>> => gqlAsyncQuery<ContainerHealthStatus>('getContainerHealthStatus', {variables, fields, asyncDataOptions, log})
export const useFindAndCountProjectsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountProjectsResult>[] | null, log?: boolean): Promise<{data: FindAndCountProjectsResult; error: GraphqlError | null}> => gqlQuery<FindAndCountProjectsResult>('findAndCountProjects', {variables, fields, log})
export const useAsyncFindAndCountProjectsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountProjectsResult>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<FindAndCountProjectsResult, Error>> => gqlAsyncQuery<FindAndCountProjectsResult>('findAndCountProjects', {variables, fields, asyncDataOptions, log})
export const useFindProjectsQuery = ( fields?: InputFields<Project>[] | null, log?: boolean): Promise<{data: Project[]; error: GraphqlError | null}> => gqlQuery<Project[]>('findProjects', { fields, log})
export const useAsyncFindProjectsQuery = ( fields?: InputFields<Project>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Project[], Error>> => gqlAsyncQuery<Project[]>('findProjects', { fields, asyncDataOptions, log})
export const useGetProjectQuery = (variables: { id: string }, fields?: InputFields<Project>[] | null, log?: boolean): Promise<{data: Project; error: GraphqlError | null}> => gqlQuery<Project>('getProject', {variables, fields, log})
export const useAsyncGetProjectQuery = (variables: { id: string }, fields?: InputFields<Project>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Project, Error>> => gqlAsyncQuery<Project>('getProject', {variables, fields, asyncDataOptions, log})
export const useFindAndCountTeamsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountTeamsResult>[] | null, log?: boolean): Promise<{data: FindAndCountTeamsResult; error: GraphqlError | null}> => gqlQuery<FindAndCountTeamsResult>('findAndCountTeams', {variables, fields, log})
export const useAsyncFindAndCountTeamsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountTeamsResult>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<FindAndCountTeamsResult, Error>> => gqlAsyncQuery<FindAndCountTeamsResult>('findAndCountTeams', {variables, fields, asyncDataOptions, log})
export const useFindTeamsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Team>[] | null, log?: boolean): Promise<{data: Team[]; error: GraphqlError | null}> => gqlQuery<Team[]>('findTeams', {variables, fields, log})
export const useAsyncFindTeamsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Team>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Team[], Error>> => gqlAsyncQuery<Team[]>('findTeams', {variables, fields, asyncDataOptions, log})
export const useGetTeamQuery = (variables: { id: string }, fields?: InputFields<Team>[] | null, log?: boolean): Promise<{data: Team; error: GraphqlError | null}> => gqlQuery<Team>('getTeam', {variables, fields, log})
export const useAsyncGetTeamQuery = (variables: { id: string }, fields?: InputFields<Team>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Team, Error>> => gqlAsyncQuery<Team>('getTeam', {variables, fields, asyncDataOptions, log})
export const useGetContainerCountQuery = (variables: { id: string },  log?: boolean): Promise<{data: number; error: GraphqlError | null}> => gqlQuery<number>('getContainerCount', {variables, fields: null, log})
export const useAsyncGetContainerCountQuery = (variables: { id: string },  log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<number, Error>> => gqlAsyncQuery<number>('getContainerCount', {variables, fields: null, asyncDataOptions, log})
export const useGetBuildCountQuery = (variables: { id: string },  log?: boolean): Promise<{data: number; error: GraphqlError | null}> => gqlQuery<number>('getBuildCount', {variables, fields: null, log})
export const useAsyncGetBuildCountQuery = (variables: { id: string },  log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<number, Error>> => gqlAsyncQuery<number>('getBuildCount', {variables, fields: null, asyncDataOptions, log})
export const useGetSystemStatsQuery = (variables: { id: string }, fields?: InputFields<SystemStats>[] | null, log?: boolean): Promise<{data: SystemStats; error: GraphqlError | null}> => gqlQuery<SystemStats>('getSystemStats', {variables, fields, log})
export const useAsyncGetSystemStatsQuery = (variables: { id: string }, fields?: InputFields<SystemStats>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<SystemStats, Error>> => gqlAsyncQuery<SystemStats>('getSystemStats', {variables, fields, asyncDataOptions, log})
export const useGetTeamByCurrentUserQuery = ( fields?: InputFields<Team>[] | null, log?: boolean): Promise<{data: Team; error: GraphqlError | null}> => gqlQuery<Team>('getTeamByCurrentUser', { fields, log})
export const useAsyncGetTeamByCurrentUserQuery = ( fields?: InputFields<Team>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Team, Error>> => gqlAsyncQuery<Team>('getTeamByCurrentUser', { fields, asyncDataOptions, log})
export const useGetMembersOfTeamQuery = ( fields?: InputFields<User>[] | null, log?: boolean): Promise<{data: User[]; error: GraphqlError | null}> => gqlQuery<User[]>('getMembersOfTeam', { fields, log})
export const useAsyncGetMembersOfTeamQuery = ( fields?: InputFields<User>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<User[], Error>> => gqlAsyncQuery<User[]>('getMembersOfTeam', { fields, asyncDataOptions, log})
export const useFindAndCountBuildsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountBuildsResult>[] | null, log?: boolean): Promise<{data: FindAndCountBuildsResult; error: GraphqlError | null}> => gqlQuery<FindAndCountBuildsResult>('findAndCountBuilds', {variables, fields, log})
export const useAsyncFindAndCountBuildsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountBuildsResult>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<FindAndCountBuildsResult, Error>> => gqlAsyncQuery<FindAndCountBuildsResult>('findAndCountBuilds', {variables, fields, asyncDataOptions, log})
export const useFindBuildsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Build>[] | null, log?: boolean): Promise<{data: Build[]; error: GraphqlError | null}> => gqlQuery<Build[]>('findBuilds', {variables, fields, log})
export const useAsyncFindBuildsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Build>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Build[], Error>> => gqlAsyncQuery<Build[]>('findBuilds', {variables, fields, asyncDataOptions, log})
export const useFindBuildsForContainerQuery = (variables: { containerId: string }, fields?: InputFields<Build>[] | null, log?: boolean): Promise<{data: Build[]; error: GraphqlError | null}> => gqlQuery<Build[]>('findBuildsForContainer', {variables, fields, log})
export const useAsyncFindBuildsForContainerQuery = (variables: { containerId: string }, fields?: InputFields<Build>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Build[], Error>> => gqlAsyncQuery<Build[]>('findBuildsForContainer', {variables, fields, asyncDataOptions, log})
export const useGetBuildQuery = (variables: { id: string }, fields?: InputFields<Build>[] | null, log?: boolean): Promise<{data: Build; error: GraphqlError | null}> => gqlQuery<Build>('getBuild', {variables, fields, log})
export const useAsyncGetBuildQuery = (variables: { id: string }, fields?: InputFields<Build>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Build, Error>> => gqlAsyncQuery<Build>('getBuild', {variables, fields, asyncDataOptions, log})
export const useFindAndCountWebPushsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountWebPushsResult>[] | null, log?: boolean): Promise<{data: FindAndCountWebPushsResult; error: GraphqlError | null}> => gqlQuery<FindAndCountWebPushsResult>('findAndCountWebPushs', {variables, fields, log})
export const useAsyncFindAndCountWebPushsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountWebPushsResult>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<FindAndCountWebPushsResult, Error>> => gqlAsyncQuery<FindAndCountWebPushsResult>('findAndCountWebPushs', {variables, fields, asyncDataOptions, log})
export const useFindWebPushsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<WebPush>[] | null, log?: boolean): Promise<{data: WebPush[]; error: GraphqlError | null}> => gqlQuery<WebPush[]>('findWebPushs', {variables, fields, log})
export const useAsyncFindWebPushsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<WebPush>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<WebPush[], Error>> => gqlAsyncQuery<WebPush[]>('findWebPushs', {variables, fields, asyncDataOptions, log})
export const useGetWebPushQuery = (variables: { id: string }, fields?: InputFields<WebPush>[] | null, log?: boolean): Promise<{data: WebPush; error: GraphqlError | null}> => gqlQuery<WebPush>('getWebPush', {variables, fields, log})
export const useAsyncGetWebPushQuery = (variables: { id: string }, fields?: InputFields<WebPush>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<WebPush, Error>> => gqlAsyncQuery<WebPush>('getWebPush', {variables, fields, asyncDataOptions, log})
export const useFindAndCountRegistrysQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountRegistrysResult>[] | null, log?: boolean): Promise<{data: FindAndCountRegistrysResult; error: GraphqlError | null}> => gqlQuery<FindAndCountRegistrysResult>('findAndCountRegistrys', {variables, fields, log})
export const useAsyncFindAndCountRegistrysQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountRegistrysResult>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<FindAndCountRegistrysResult, Error>> => gqlAsyncQuery<FindAndCountRegistrysResult>('findAndCountRegistrys', {variables, fields, asyncDataOptions, log})
export const useFindRegistrysQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Registry>[] | null, log?: boolean): Promise<{data: Registry[]; error: GraphqlError | null}> => gqlQuery<Registry[]>('findRegistrys', {variables, fields, log})
export const useAsyncFindRegistrysQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Registry>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Registry[], Error>> => gqlAsyncQuery<Registry[]>('findRegistrys', {variables, fields, asyncDataOptions, log})
export const useGetRegistryQuery = (variables: { id: string }, fields?: InputFields<Registry>[] | null, log?: boolean): Promise<{data: Registry; error: GraphqlError | null}> => gqlQuery<Registry>('getRegistry', {variables, fields, log})
export const useAsyncGetRegistryQuery = (variables: { id: string }, fields?: InputFields<Registry>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Registry, Error>> => gqlAsyncQuery<Registry>('getRegistry', {variables, fields, asyncDataOptions, log})
export const useFindSourcesQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Source>[] | null, log?: boolean): Promise<{data: Source[]; error: GraphqlError | null}> => gqlQuery<Source[]>('findSources', {variables, fields, log})
export const useAsyncFindSourcesQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Source>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Source[], Error>> => gqlAsyncQuery<Source[]>('findSources', {variables, fields, asyncDataOptions, log})
export const useGetSourceQuery = (variables: { id: string }, fields?: InputFields<Source>[] | null, log?: boolean): Promise<{data: Source; error: GraphqlError | null}> => gqlQuery<Source>('getSource', {variables, fields, log})
export const useAsyncGetSourceQuery = (variables: { id: string }, fields?: InputFields<Source>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Source, Error>> => gqlAsyncQuery<Source>('getSource', {variables, fields, asyncDataOptions, log})
export const useFindAndCountBackupsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountBackupsResult>[] | null, log?: boolean): Promise<{data: FindAndCountBackupsResult; error: GraphqlError | null}> => gqlQuery<FindAndCountBackupsResult>('findAndCountBackups', {variables, fields, log})
export const useAsyncFindAndCountBackupsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountBackupsResult>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<FindAndCountBackupsResult, Error>> => gqlAsyncQuery<FindAndCountBackupsResult>('findAndCountBackups', {variables, fields, asyncDataOptions, log})
export const useFindBackupsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Backup>[] | null, log?: boolean): Promise<{data: Backup[]; error: GraphqlError | null}> => gqlQuery<Backup[]>('findBackups', {variables, fields, log})
export const useAsyncFindBackupsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Backup>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Backup[], Error>> => gqlAsyncQuery<Backup[]>('findBackups', {variables, fields, asyncDataOptions, log})
export const useGetBackupQuery = (variables: { id: string }, fields?: InputFields<Backup>[] | null, log?: boolean): Promise<{data: Backup; error: GraphqlError | null}> => gqlQuery<Backup>('getBackup', {variables, fields, log})
export const useAsyncGetBackupQuery = (variables: { id: string }, fields?: InputFields<Backup>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Backup, Error>> => gqlAsyncQuery<Backup>('getBackup', {variables, fields, asyncDataOptions, log})
export const useGetBackupByDatabaseQuery = (variables: { containerId: string }, fields?: InputFields<Backup>[] | null, log?: boolean): Promise<{data: Backup; error: GraphqlError | null}> => gqlQuery<Backup>('getBackupByDatabase', {variables, fields, log})
export const useAsyncGetBackupByDatabaseQuery = (variables: { containerId: string }, fields?: InputFields<Backup>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Backup, Error>> => gqlAsyncQuery<Backup>('getBackupByDatabase', {variables, fields, asyncDataOptions, log})
export const useListBackupsQuery = (variables: { containerId: string }, fields?: InputFields<S3BackupListOutput>[] | null, log?: boolean): Promise<{data: S3BackupListOutput[]; error: GraphqlError | null}> => gqlQuery<S3BackupListOutput[]>('listBackups', {variables, fields, log})
export const useAsyncListBackupsQuery = (variables: { containerId: string }, fields?: InputFields<S3BackupListOutput>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<S3BackupListOutput[], Error>> => gqlAsyncQuery<S3BackupListOutput[]>('listBackups', {variables, fields, asyncDataOptions, log})
export const useFindApiKeysQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<ApiKey>[] | null, log?: boolean): Promise<{data: ApiKey[]; error: GraphqlError | null}> => gqlQuery<ApiKey[]>('findApiKeys', {variables, fields, log})
export const useAsyncFindApiKeysQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<ApiKey>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<ApiKey[], Error>> => gqlAsyncQuery<ApiKey[]>('findApiKeys', {variables, fields, asyncDataOptions, log})
export const useLogoutMutation = (variables: { allDevices?: boolean },  log?: boolean): Promise<{data: boolean; error: GraphqlError}> => gqlMutation<boolean>('logout', {variables, fields: null, log})
export const useRefreshTokenMutation = ( fields?: InputFields<CoreAuthModel>[] | null, log?: boolean): Promise<{data: CoreAuthModel; error: GraphqlError}> => gqlMutation<CoreAuthModel>('refreshToken', { fields, log})
export const useSignInMutation = (variables: { input: AuthSignInInput }, fields?: InputFields<Auth>[] | null, log?: boolean): Promise<{data: Auth; error: GraphqlError}> => gqlMutation<Auth>('signIn', {variables, fields, log})
export const useSignUpMutation = (variables: { input: AuthSignUpInput }, fields?: InputFields<Auth>[] | null, log?: boolean): Promise<{data: Auth; error: GraphqlError}> => gqlMutation<Auth>('signUp', {variables, fields, log})
export const useCreateUserMutation = (variables: { input: UserCreateInput }, fields?: InputFields<User>[] | null, log?: boolean): Promise<{data: User; error: GraphqlError}> => gqlMutation<User>('createUser', {variables, fields, log})
export const useDeleteUserMutation = (variables: { id: string }, fields?: InputFields<User>[] | null, log?: boolean): Promise<{data: User; error: GraphqlError}> => gqlMutation<User>('deleteUser', {variables, fields, log})
export const useResetPasswordMutation = (variables: { token: string, password: string },  log?: boolean): Promise<{data: boolean; error: GraphqlError}> => gqlMutation<boolean>('resetPassword', {variables, fields: null, log})
export const useUpdateUserMutation = (variables: { input: UserInput, id: string }, fields?: InputFields<User>[] | null, log?: boolean): Promise<{data: User; error: GraphqlError}> => gqlMutation<User>('updateUser', {variables, fields, log})
export const useVerifyUserMutation = (variables: { token: string },  log?: boolean): Promise<{data: boolean; error: GraphqlError}> => gqlMutation<boolean>('verifyUser', {variables, fields: null, log})
export const useDeleteFileMutation = (variables: { filename: string }, fields?: InputFields<FileInfo>[] | null, log?: boolean): Promise<{data: FileInfo; error: GraphqlError}> => gqlMutation<FileInfo>('deleteFile', {variables, fields, log})
export const useUploadFileMutation = (variables: { file: any }, fields?: InputFields<FileInfo>[] | null, log?: boolean): Promise<{data: FileInfo; error: GraphqlError}> => gqlMutation<FileInfo>('uploadFile', {variables, fields, log})
export const useUploadFilesMutation = (variables: { files: any[] },  log?: boolean): Promise<{data: boolean; error: GraphqlError}> => gqlMutation<boolean>('uploadFiles', {variables, fields: null, log})
export const useCreateContainerMutation = (variables: { projectId: string, input: ContainerCreateInput }, fields?: InputFields<Container>[] | null, log?: boolean): Promise<{data: Container; error: GraphqlError}> => gqlMutation<Container>('createContainer', {variables, fields, log})
export const useDuplicateContainerMutation = (variables: { containerId: string }, fields?: InputFields<Container>[] | null, log?: boolean): Promise<{data: Container; error: GraphqlError}> => gqlMutation<Container>('duplicateContainer', {variables, fields, log})
export const useDeleteContainerMutation = (variables: { id: string }, fields?: InputFields<Container>[] | null, log?: boolean): Promise<{data: Container; error: GraphqlError}> => gqlMutation<Container>('deleteContainer', {variables, fields, log})
export const useUpdateContainerMutation = (variables: { id: string, input: ContainerInput }, fields?: InputFields<Container>[] | null, log?: boolean): Promise<{data: Container; error: GraphqlError}> => gqlMutation<Container>('updateContainer', {variables, fields, log})
export const useDeployContainerMutation = (variables: { id: string }, fields?: InputFields<Container>[] | null, log?: boolean): Promise<{data: Container; error: GraphqlError}> => gqlMutation<Container>('deployContainer', {variables, fields, log})
export const useStopContainerMutation = (variables: { id: string }, fields?: InputFields<Container>[] | null, log?: boolean): Promise<{data: Container; error: GraphqlError}> => gqlMutation<Container>('stopContainer', {variables, fields, log})
export const useStopAllContainersMutation = (  log?: boolean): Promise<{data: boolean; error: GraphqlError}> => gqlMutation<boolean>('stopAllContainers', { fields: null, log})
export const useStartAllStoppedContainersMutation = (  log?: boolean): Promise<{data: boolean; error: GraphqlError}> => gqlMutation<boolean>('startAllStoppedContainers', { fields: null, log})
export const useDeleteVolumeMutation = (variables: { id: string },  log?: boolean): Promise<{data: boolean; error: GraphqlError}> => gqlMutation<boolean>('deleteVolume', {variables, fields: null, log})
export const useCreateProjectMutation = (variables: { teamId: string, input: ProjectCreateInput }, fields?: InputFields<Project>[] | null, log?: boolean): Promise<{data: Project; error: GraphqlError}> => gqlMutation<Project>('createProject', {variables, fields, log})
export const useDeleteProjectMutation = (variables: { id: string }, fields?: InputFields<Project>[] | null, log?: boolean): Promise<{data: Project; error: GraphqlError}> => gqlMutation<Project>('deleteProject', {variables, fields, log})
export const useUpdateProjectMutation = (variables: { id: string, input: ProjectInput }, fields?: InputFields<Project>[] | null, log?: boolean): Promise<{data: Project; error: GraphqlError}> => gqlMutation<Project>('updateProject', {variables, fields, log})
export const useCreateTeamMutation = (variables: { input: TeamCreateInput }, fields?: InputFields<Team>[] | null, log?: boolean): Promise<{data: Team; error: GraphqlError}> => gqlMutation<Team>('createTeam', {variables, fields, log})
export const useDeleteTeamMutation = (variables: { id: string }, fields?: InputFields<Team>[] | null, log?: boolean): Promise<{data: Team; error: GraphqlError}> => gqlMutation<Team>('deleteTeam', {variables, fields, log})
export const useUpdateTeamMutation = (variables: { id: string, input: TeamInput }, fields?: InputFields<Team>[] | null, log?: boolean): Promise<{data: Team; error: GraphqlError}> => gqlMutation<Team>('updateTeam', {variables, fields, log})
export const useInviteTeamMemberMutation = (variables: { teamId: string, input: UserCreateInput }, fields?: InputFields<User>[] | null, log?: boolean): Promise<{data: User; error: GraphqlError}> => gqlMutation<User>('inviteTeamMember', {variables, fields, log})
export const useCreateBuildMutation = (variables: { input: BuildCreateInput }, fields?: InputFields<Build>[] | null, log?: boolean): Promise<{data: Build; error: GraphqlError}> => gqlMutation<Build>('createBuild', {variables, fields, log})
export const useDeleteBuildMutation = (variables: { id: string }, fields?: InputFields<Build>[] | null, log?: boolean): Promise<{data: Build; error: GraphqlError}> => gqlMutation<Build>('deleteBuild', {variables, fields, log})
export const useUpdateBuildMutation = (variables: { id: string, input: BuildInput }, fields?: InputFields<Build>[] | null, log?: boolean): Promise<{data: Build; error: GraphqlError}> => gqlMutation<Build>('updateBuild', {variables, fields, log})
export const useRestartBuildMutation = (variables: { id: string },  log?: boolean): Promise<{data: boolean; error: GraphqlError}> => gqlMutation<boolean>('restartBuild', {variables, fields: null, log})
export const useStopBuildMutation = (variables: { id: string },  log?: boolean): Promise<{data: boolean; error: GraphqlError}> => gqlMutation<boolean>('stopBuild', {variables, fields: null, log})
export const useCreateWebPushMutation = (variables: { input: WebPushCreateInput }, fields?: InputFields<WebPush>[] | null, log?: boolean): Promise<{data: WebPush; error: GraphqlError}> => gqlMutation<WebPush>('createWebPush', {variables, fields, log})
export const useDeleteWebPushMutation = (variables: { id: string }, fields?: InputFields<WebPush>[] | null, log?: boolean): Promise<{data: WebPush; error: GraphqlError}> => gqlMutation<WebPush>('deleteWebPush', {variables, fields, log})
export const useUpdateWebPushMutation = (variables: { id: string, input: WebPushInput }, fields?: InputFields<WebPush>[] | null, log?: boolean): Promise<{data: WebPush; error: GraphqlError}> => gqlMutation<WebPush>('updateWebPush', {variables, fields, log})
export const useCreateRegistryMutation = (variables: { teamId: string, input: RegistryCreateInput }, fields?: InputFields<Registry>[] | null, log?: boolean): Promise<{data: Registry; error: GraphqlError}> => gqlMutation<Registry>('createRegistry', {variables, fields, log})
export const useDeleteRegistryMutation = (variables: { id: string }, fields?: InputFields<Registry>[] | null, log?: boolean): Promise<{data: Registry; error: GraphqlError}> => gqlMutation<Registry>('deleteRegistry', {variables, fields, log})
export const useUpdateRegistryMutation = (variables: { id: string, input: RegistryInput }, fields?: InputFields<Registry>[] | null, log?: boolean): Promise<{data: Registry; error: GraphqlError}> => gqlMutation<Registry>('updateRegistry', {variables, fields, log})
export const useCreateSourceMutation = (variables: { input: SourceCreateInput }, fields?: InputFields<Source>[] | null, log?: boolean): Promise<{data: Source; error: GraphqlError}> => gqlMutation<Source>('createSource', {variables, fields, log})
export const useDeleteSourceMutation = (variables: { id: string }, fields?: InputFields<Source>[] | null, log?: boolean): Promise<{data: Source; error: GraphqlError}> => gqlMutation<Source>('deleteSource', {variables, fields, log})
export const useUpdateSourceMutation = (variables: { id: string, input: SourceInput }, fields?: InputFields<Source>[] | null, log?: boolean): Promise<{data: Source; error: GraphqlError}> => gqlMutation<Source>('updateSource', {variables, fields, log})
export const useCreateBackupMutation = (variables: { input: BackupCreateInput }, fields?: InputFields<Backup>[] | null, log?: boolean): Promise<{data: Backup; error: GraphqlError}> => gqlMutation<Backup>('createBackup', {variables, fields, log})
export const useDeleteBackupMutation = (variables: { id: string }, fields?: InputFields<Backup>[] | null, log?: boolean): Promise<{data: Backup; error: GraphqlError}> => gqlMutation<Backup>('deleteBackup', {variables, fields, log})
export const useRestoreBackupMutation = (variables: { containerId: string, s3Key: string },  log?: boolean): Promise<{data: boolean; error: GraphqlError}> => gqlMutation<boolean>('restoreBackup', {variables, fields: null, log})
export const useRestoreBackupVolumeMutation = (variables: { containerId: string, s3Key: string },  log?: boolean): Promise<{data: boolean; error: GraphqlError}> => gqlMutation<boolean>('restoreBackupVolume', {variables, fields: null, log})
export const useUpdateBackupMutation = (variables: { id: string, input: BackupInput }, fields?: InputFields<Backup>[] | null, log?: boolean): Promise<{data: Backup; error: GraphqlError}> => gqlMutation<Backup>('updateBackup', {variables, fields, log})
export const useCreateApiKeyMutation = (variables: { input: ApiKeyCreateInput }, fields?: InputFields<ApiKey>[] | null, log?: boolean): Promise<{data: ApiKey; error: GraphqlError}> => gqlMutation<ApiKey>('createApiKey', {variables, fields, log})
export const useDeleteApiKeyMutation = (variables: { id: string }, fields?: InputFields<ApiKey>[] | null, log?: boolean): Promise<{data: ApiKey; error: GraphqlError}> => gqlMutation<ApiKey>('deleteApiKey', {variables, fields, log})
export const useUserCreatedSubscription = ( fields?: InputFields<User>[] | null, log?: boolean): Promise<ReturnTypeOfSubscription<User>> => gqlSubscription<User>('userCreated', { fields, log})
export const useEventsSubscription = ( fields?: InputFields<EventsOutput>[] | null, log?: boolean): Promise<ReturnTypeOfSubscription<EventsOutput>> => gqlSubscription<EventsOutput>('events', { fields, log})
export const useProjectCreatedSubscription = ( fields?: InputFields<Project>[] | null, log?: boolean): Promise<ReturnTypeOfSubscription<Project>> => gqlSubscription<Project>('projectCreated', { fields, log})
export const useBuildCreatedSubscription = ( fields?: InputFields<Build>[] | null, log?: boolean): Promise<ReturnTypeOfSubscription<Build>> => gqlSubscription<Build>('buildCreated', { fields, log})
export const useWebPushCreatedSubscription = ( fields?: InputFields<WebPush>[] | null, log?: boolean): Promise<ReturnTypeOfSubscription<WebPush>> => gqlSubscription<WebPush>('webPushCreated', { fields, log})